name: code-quality
on:
  workflow_call:
    inputs:
      node-version:
        type: string
        default: '20'
        
      enforce:
        description: "Si enforce esta activado, falla si no hay lint/test"
        type: boolean
        default: false

jobs:
  code-quality:
    name: Lint & tests
    
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # Detecta si es un proyecto Node (package.json)
      - name: Verificar package.json
        id: pkg
        run: |
          echo "[INFO] Buscando package.json en el repo..."
          if [ -f package.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "[INFO] Encontrado package.json"
          else
            else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "[INFO] No se encontró package.json (no es proyecto Node)"
          fi

        # Forzar la existencia de package.json si enforce=true
      - name: Validar presencia de Node
        if: inputs.enforce == true
        run: |
          if [ "${{ steps.pkg.outputs.found }}" != "true" ]; then
            echo "[ERROR] No se encontró package.json pero enforce=true"; exit 1
          fi

      # Configura Node.js
      - name: Configurar Node.js
        # Solo si es proyecto Node
        if: ${{ steps.pkg.outputs.found == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm

      - name: Instalar dependencias
        if: ${{ steps.pkg.outputs.found == 'true' }}
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "[INFO] Usando npm ci (package-lock.json detectado)"
            if ! npm ci; then
              if [ "${{ inputs.enforce }}" = "true" ]; then
                echo "[ERROR] npm ci falló y enforce=true"
                exit 1
              else
                echo "[WARN] npm ci falló pero enforce=false, intentando npm i..."
                set +e
                npm i --no-audit --no-fund
                RES=$?
                set -e
                if [ $RES -ne 0 ]; then
                  echo "[WARN] npm i también falló; continuando por ser enforce=false"
                fi
              fi
            fi
          else
            echo "[INFO] No hay package-lock.json, usando npm i"
            if ! npm i --no-audit --no-fund; then
              if [ "${{ inputs.enforce }}" = "true" ]; then
                echo "[ERROR] npm i falló y enforce=true"
                exit 1
              else
                echo "[WARN] npm i falló pero enforce=false; continuando"
              fi
            fi
          fi

      # Formatea el código si hay un script de formateo
      - name: Ejecutar formatter si existe
        if: ${{ steps.pkg.outputs.found == 'true' }}
        run: |
          if npm run | grep -qE '(^| )prettier( |$)|(^| )format( |$)'; then
            echo "[INFO] Encontrado script de formateo (prettier/format)"
            set +e
            npm run prettier --if-present || npm run format --if-present
            RES=$?
            set -e
            if [ $RES -ne 0 ]; then
              if [ "${{ inputs.enforce }}" = "true" ]; then
                echo "[ERROR] Formatter falló y enforce=true"
                exit $RES
              else
                echo "[WARN] Formatter falló pero enforce=false; continuando"
              fi
            fi
          else
            echo "[INFO] No se encontró script de formateo (prettier/format)"
          fi

      # Lint de código
      - name: Ejecutar lint si existe
        if: ${{ steps.pkg.outputs.found == 'true' }}
        run: |
          if npm run | grep -qE '(^| )lint( |$)'; then
            echo "[INFO] Ejecutando npm run lint"
            set +e
            npm run lint
            RES=$?
            set -e
            if [ $RES -ne 0 ]; then
              if [ "${{ inputs.enforce }}" = "true" ]; then
                echo "[ERROR] Lint falló y enforce=true"
                exit $RES
              else
                echo "[WARN] Lint falló pero enforce=false; continuando"
              fi
            fi
          else
            echo "[INFO] No se encontró script de lint"
          fi

      # Pruebas de código, si hay un script de pruebas
      - name: Ejecutar tests si existe
        if: ${{ steps.pkg.outputs.found == 'true' }}
        run: |
          if npm run | grep -qE '(^| )test( |$)'; then
            echo "[INFO] Ejecutando npm test"
            set +e
            npm test --silent --if-present
            RES=$?
            set -e
            if [ $RES -ne 0 ]; then
              if [ "${{ inputs.enforce }}" = "true" ]; then
                echo "[ERROR] Tests fallaron y enforce=true"
                exit $RES
              else
                echo "[WARN] Tests fallaron pero enforce=false; continuando"
              fi
            fi
          else
            echo "[INFO] No se encontró script de pruebas (test)"
          fi

      # Exigir la existencia de scripts (solo si enforce=true y hay package.json)
      - name: Exigir existencia lint y test
        if: ${{ inputs.enforce && steps.pkg.outputs.found == 'true' }}
        run: |
          MISS=0
          if ! npm run | grep -qE '(^| )lint( |$)'; then
            echo "[ERROR] enforce=true: falta script de lint"
            MISS=1
          fi
          if ! npm run | grep -qE '(^| )test( |$)'; then
            echo "[ERROR] enforce=true: falta script de pruebas (test)"
            MISS=1
          fi
          if [ $MISS -ne 0 ]; then
            exit 1
          fi
      
      # Resumen final
      - name: Resumen
        run: |
          echo "=== RESUMEN CODE-QUALITY ==="
          echo "enforce: ${{ inputs.enforce }}"
          echo "package.json encontrado: ${{ steps.pkg.outputs.found }}"
          echo "Si enforce=false, fallos de lint/tests no bloquean el merge."
          echo "============================"